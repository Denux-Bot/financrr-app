//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use sea_orm::ActiveValue::Set;

use crate::error::EntityError;
use crate::utility::hashing::hash_string;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: i32,
	#[sea_orm(column_type = "Text", unique)]
	pub username: String,
	#[sea_orm(column_type = "Text", nullable, unique)]
	pub email: Option<String>,
	#[sea_orm(column_type = "Text")]
	pub password: String,
	pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::account::Entity")]
	Account,
}

impl Related<super::account::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Account.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
	pub fn verify_password(&self, password: &[u8]) -> Result<bool, EntityError> {
		argon2::verify_encoded(&self.password, password).map_err(EntityError::HashingFailed)
	}
}

impl Entity {
	pub fn find_by_username(username: String) -> Select<Entity> {
		Self::find().filter(Column::Username.eq(username))
	}

	pub fn register(username: String, email: Option<String>, password: String) -> Result<ActiveModel, EntityError> {
		let hashed_password = hash_string(&password)?;

		Ok(ActiveModel {
			username: Set(username),
			email: Set(email),
			password: Set(hashed_password),
			created_at: Set(chrono::Local::now().naive_local()),
			..Default::default()
		})
	}
}
