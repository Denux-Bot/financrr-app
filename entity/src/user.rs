//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use anyhow::{anyhow, Error};
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: i32,
	#[sea_orm(column_type = "Text", unique)]
	pub username: String,
	#[sea_orm(column_type = "Text", nullable, unique)]
	pub email: Option<String>,
	#[sea_orm(column_type = "Text")]
	pub password: String,
	pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
	pub fn verify_password(&self, password: &[u8]) -> Result<bool, Error> {
		argon2::verify_encoded(&self.password, password)
			.map_err(|e| anyhow!(format!("Failed to verify password: {}", e)))
	}

	pub async fn find_by_username(username: &str, db: &DatabaseConnection) -> Result<Option<Self>, DbErr> {
		let user = Entity::find().filter(Column::Username.contains(username)).one(db).await?;
		Ok(user)
	}
}
