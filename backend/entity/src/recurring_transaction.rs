//! `SeaORM` Entity. Generated by sea-orm-codegen 1.0.0-rc.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "recurring_transaction")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub template: i32,
    pub repeat_interval_seconds: i64,
    pub created_at: TimeDateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::transaction_template::Entity",
        from = "Column::Template",
        to = "super::transaction_template::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TransactionTemplate,
}

impl Related<super::transaction_template::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TransactionTemplate.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
